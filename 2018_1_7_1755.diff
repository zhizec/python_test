Index: C_Application/SC_OAM/OM_PIL/Source/NtpTimeParamsWrapper.cpp
===================================================================
--- C_Application/SC_OAM/OM_PIL/Source/NtpTimeParamsWrapper.cpp	(revision 0)
+++ C_Application/SC_OAM/OM_PIL/Source/NtpTimeParamsWrapper.cpp	(revision 0)
@@ -0,0 +1,102 @@
+#include "NtpTimeParamsWrapper.h"
+#include "utils/Memory.h"
+
+NtpTimeParamsWrapper::NtpTimeParamsWrapper()
+{
+    ntpTimeParams = {};
+}
+
+NtpTimeParamsWrapper::NtpTimeParamsWrapper(NtpTimeParams ntpTimeParams) : ntpTimeParams(ntpTimeParams)
+{
+    serverCount = ntpTimeParams.serverCount;
+}
+
+bool NtpTimeParamsWrapper::hasServerConfig(unsigned int index) const
+{
+    if (index >= maxNtpTimeServersNumber)
+    {
+        return false;
+    }
+    
+    return ( index < serverCount );
+}
+
+void NtpTimeParamsWrapper::setServerConfig(unsigned int index, const std::string &value)
+{
+    std::copy(value.begin(), value.end(), ntpTimeParams.serversConfig[index].ipAddr);
+}
+
+NtpTimeServersConfig NtpTimeParamsWrapper::getServersConfig(unsigned int index) const
+{
+    return ntpTimeParams.serversConfig[index];
+}
+
+bool NtpTimeParamsWrapper::hasLocalIp() const
+{
+    return ntpTimeParams.paramFlag;
+}
+
+void NtpTimeParamsWrapper::setLocalIp(const std::string& ntpTimeLocalIp)
+{
+    std::copy(ntpTimeLocalIp.begin(), ntpTimeLocalIp.end(), ntpTimeParams.localIp);
+    ntpTimeParams.paramFlag = true;
+}
+
+std::string NtpTimeParamsWrapper::getLocalIp() const
+{
+    return ntpTimeParams.localIp;
+}
+
+bool NtpTimeParamsWrapper::isLocalIpNonzero() const
+{
+    if (hasLocalIp())
+    {
+        std::string currentLocalIp = getLocalIp();
+        return (not currentLocalIp.empty()) and (currentLocalIp != "0.0.0.0");
+    }
+    return false;
+}
+
+bool NtpTimeParamsWrapper::hasServerStatusList(unsigned int index) const
+{
+    return hasServerConfig(index);
+}
+
+void NtpTimeParamsWrapper::setServerStatusList(unsigned int index, const NtpTimeServerStatusList &ntpTimeServerStatusList)
+{
+    ntpTimeParams.serverStatusList[index] = ntpTimeServerStatusList;
+    serverCount++;
+    ntpTimeParams.serverCount = serverCount;
+}
+
+NtpTimeServerStatusList NtpTimeParamsWrapper::getServerStatusList(unsigned index) const
+{
+    return ntpTimeParams.serverStatusList[index];
+}
+
+NtpTimeParams NtpTimeParamsWrapper::getNtpTimeParams() const
+{
+    return ntpTimeParams;
+}
+
+void NtpTimeParamsWrapper::dumpToLog() const
+{
+    std::string logContent;
+
+    btsomLogger(LOG_INFO, "NTP time Parameters");
+
+    for (unsigned int i = 0; i < serverCount; ++i)
+    {
+        logContent += " Server Config " + std::to_string(i) + " : ipAddr " + std::string(ntpTimeParams.serversConfig[i].ipAddr);
+    }
+
+    logContent += hasLocalIp() ? " , LocalIp : " + std::string(ntpTimeParams.localIp) : "";
+    for (unsigned int i = 0; i < serverCount; ++i)
+    {
+        logContent +=
+            " , Server Status " + std::to_string(i) + " : ipAddr : " + std::string(ntpTimeParams.serverStatusList[i].ipAdrr);
+        logContent += " , status : " + std::to_string(static_cast<int>(ntpTimeParams.serverStatusList[i].status));
+    }
+
+    btsomLogger(LOG_INFO, "Ntp time Config : %s", logContent.c_str());
+}
Index: C_Application/SC_OAM/OM_PIL/Include/NtpTimeParamsWrapper.h
===================================================================
--- C_Application/SC_OAM/OM_PIL/Include/NtpTimeParamsWrapper.h	(revision 0)
+++ C_Application/SC_OAM/OM_PIL/Include/NtpTimeParamsWrapper.h	(revision 0)
@@ -0,0 +1,32 @@
+#pragma once
+
+#include "NtpTimeParams.h"
+
+class NtpTimeParamsWrapper
+{
+public:
+    NtpTimeParamsWrapper();
+    explicit NtpTimeParamsWrapper(NtpTimeParams ntpTimeParams);
+
+    bool hasServerConfig(unsigned int index) const;
+    void setServerConfig(unsigned int index, const std::string &value);
+    NtpTimeServersConfig getServersConfig(unsigned int index) const;
+
+    bool hasLocalIp() const;
+    void setLocalIp(const std::string& ntpTimeLocalIp);
+    bool isLocalIpNonzero() const;
+    std::string getLocalIp() const;
+
+    bool hasServerStatusList(unsigned int index) const;
+    void setServerStatusList(unsigned int index, const NtpTimeServerStatusList &ntpTimeServerStatusList);
+    NtpTimeServerStatusList getServerStatusList(unsigned index) const;
+
+    NtpTimeParams getNtpTimeParams() const;
+    void dumpToLog() const;
+    //void convertStatusListToNtpTimeParam(SYNC_IM_VERSION::time_t &ntpInfoModel);
+    //void convertLocalIpToNtpTimeParam(SYNC_IM_VERSION::time_t &ntpInfoModel);
+
+private:
+    NtpTimeParams ntpTimeParams{};
+    unsigned int serverCount = 0;
+};
Index: C_Application/SC_OAM/OM_PIL/Include/SyncModifyParams.h
===================================================================
--- C_Application/SC_OAM/OM_PIL/Include/SyncModifyParams.h	(revision 78711)
+++ C_Application/SC_OAM/OM_PIL/Include/SyncModifyParams.h	(working copy)
@@ -6,6 +6,7 @@
 #include "BtsOmLogger.h"
 #include <boost/range/algorithm.hpp>
 #include "NtpSyncParams.h"
+#include "NtpTimeParams.h"
 
 #define IP_ADDRESS_MAX_LENGTH 48
 #define ETH_MULTICAST_ADDRESS_LENGTH sizeof("00-00-00-00-00-00")
@@ -613,7 +614,8 @@
     TRS_DCPort,
     TRS_TOP1,
     TRS_TOP2,
-    TRS_TOP3
+    TRS_TOP3,
+    TRS_TIME
 };
 
 enum msgStatus
@@ -639,6 +641,7 @@
         syncTrsToP1Params top1MocInfo;
         syncTrsToP2Params top2MocInfo;
         syncTrsToP3Params top3MocInfo;
+        NtpTimeParams ntpTimeMocInfo;
     } data;
     bool lastMsg;
 } __attribute__((packed));
Index: C_Application/SC_OAM/OM_PIL/Include/NtpTimeParams.h
===================================================================
--- C_Application/SC_OAM/OM_PIL/Include/NtpTimeParams.h	(revision 0)
+++ C_Application/SC_OAM/OM_PIL/Include/NtpTimeParams.h	(revision 0)
@@ -0,0 +1,37 @@
+#pragma once
+
+#include <string>
+#include <cstring>
+
+#include "BtsOmLogger.h"
+
+static const unsigned int maxNtpTimeIpAddressLen = 48;
+static const unsigned int maxNtpTimeServersNumber = 3;
+
+struct NtpTimeServersConfig
+{
+    char ipAddr[maxNtpTimeIpAddressLen];
+};
+
+enum class NtpTimeServerStatus
+{
+    EntpTimeServerStatus_Unknown = 0,
+    EntpTimeServerStatus_Unavailable = 1,
+    EntpTimeServerStatus_Available = 2,
+    EntpTimeServerStatus_InSync = 3
+};
+
+struct NtpTimeServerStatusList
+{
+    char ipAdrr[maxNtpTimeIpAddressLen];
+    NtpTimeServerStatus status;
+};
+
+struct NtpTimeParams
+{
+    NtpTimeServersConfig serversConfig[maxNtpTimeServersNumber];
+    char localIp[maxNtpTimeIpAddressLen];
+    NtpTimeServerStatusList serverStatusList[maxNtpTimeServersNumber];
+    unsigned int serverCount;
+    bool paramFlag;
+} __attribute__((packed));
Index: C_Application/SC_OAM/OM_Stub/Make/OM_StubUT.mk
===================================================================
--- C_Application/SC_OAM/OM_Stub/Make/OM_StubUT.mk	(revision 78711)
+++ C_Application/SC_OAM/OM_Stub/Make/OM_StubUT.mk	(working copy)
@@ -26,7 +26,7 @@
 VPATH += $(PROJECT_ROOT)/C_Application/SC_OAM/PIA/OM_RP1A/Source
 VPATH += $(PROJECT_ROOT)/C_Application/SC_OAM/PIA/OM_RP1A/Source/soap
 
-CFILES := MessageTraitsOMStubUT.cpp OMStubLedSvc.cpp OMStubLedSvcTest.cpp OMStubHwApiResetSvc.cpp OMStubHwApiResetSvcTest.cpp OMStubTrswRcvr.cpp OMStubTrswRcvrTest.cpp OMStubSwDwldSvc.cpp OMStubSwDwldSvcTest.cpp OMStubBtsomRcvr.cpp OMStubBtsomRcvrTest.cpp OMStubFaRecoMgrSvc.cpp OMStubFaRecoMgrSvcTest.cpp ObsaiXmlParser.cpp TrswTopConfig.cpp TrswAddTransportNwIpAddrList.cpp TrswNtpConfig.cpp RetrieveParamReq.cpp SOAPMsg.cpp RfswSupportedFeaturesDistnamesListParser.cpp RfswSupportedFeatureMOsHandler.cpp ParamSOAPMsg.cpp
+CFILES := MessageTraitsOMStubUT.cpp OMStubLedSvc.cpp OMStubLedSvcTest.cpp OMStubHwApiResetSvc.cpp OMStubHwApiResetSvcTest.cpp OMStubTrswRcvr.cpp OMStubTrswRcvrTest.cpp OMStubSwDwldSvc.cpp OMStubSwDwldSvcTest.cpp OMStubBtsomRcvr.cpp OMStubBtsomRcvrTest.cpp OMStubFaRecoMgrSvc.cpp OMStubFaRecoMgrSvcTest.cpp ObsaiXmlParser.cpp TrswTopConfig.cpp TrswAddTransportNwIpAddrList.cpp TrswNtpConfig.cpp RetrieveParamReq.cpp SOAPMsg.cpp RfswSupportedFeaturesDistnamesListParser.cpp RfswSupportedFeatureMOsHandler.cpp ParamSOAPMsg.cpp TrswNtpTimeConfig.cpp
 
 OM_StubUT-objs += $(CFILES:%.cpp=%.$(OBJ_SUFFIX))
 
Index: C_Application/SC_OAM/OM_Stub/Make/OM_Stub.mk
===================================================================
--- C_Application/SC_OAM/OM_Stub/Make/OM_Stub.mk	(revision 78711)
+++ C_Application/SC_OAM/OM_Stub/Make/OM_Stub.mk	(working copy)
@@ -47,7 +47,7 @@
 BASEPATH = $(PROJECT_ROOT)/$(WORKING_DIR)/Source
 
 CFILES = $(call rwildcard,$(BASEPATH)/,*.cpp)
-CFILESRP1 = ObsaiXmlParser.cpp TrswTopConfig.cpp TrswAddTransportNwIpAddrList.cpp TrswNtpConfig.cpp RetrieveParamReq.cpp SOAPMsg.cpp RfswSupportedFeaturesDistnamesListParser.cpp RfswSupportedFeatureMOsHandler.cpp ParamSOAPMsg.cpp
+CFILESRP1 = ObsaiXmlParser.cpp TrswTopConfig.cpp TrswAddTransportNwIpAddrList.cpp TrswNtpConfig.cpp RetrieveParamReq.cpp SOAPMsg.cpp RfswSupportedFeaturesDistnamesListParser.cpp RfswSupportedFeatureMOsHandler.cpp ParamSOAPMsg.cpp TrswNtpTimeConfig.cpp
 
 OM_Stubexe-objs += $(CFILES:$(BASEPATH)/%.cpp=%.$(OBJ_SUFFIX))
 OM_Stubexe-objs += $(CFILESRP1:%.cpp=%.$(OBJ_SUFFIX))
Index: C_Application/SC_OAM/PIA/OM_BMA/Source/SyncAStateReady.cpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_BMA/Source/SyncAStateReady.cpp	(revision 78711)
+++ C_Application/SC_OAM/PIA/OM_BMA/Source/SyncAStateReady.cpp	(working copy)
@@ -281,6 +281,19 @@
             }
             break;
         }
+        case TRS_TIME:
+        {
+            synca_time_object* timeObject = static_cast<synca_time_object*>(bmimObj.getObject(OBJ_TIME));
+            if (timeObject)
+            {
+                handleChangeNotificationFromTrs(tmpMsg, msgEvent, timeObject->isNtpTimeInProgress());
+            }
+            else
+            {
+                btsomLogger(LOG_ERR, "Failed get the NTP Time Object. BTSOM_SYNC_CHANGE_NOTIFICATION failed");
+            }
+            break;
+        }
         default:
             processChangeNotificationFromTrs(tmpMsg);
         }
@@ -693,6 +706,17 @@
         btsomLogger(LOG_ERR, "Failed to send the DCP updates to SyncApp");
         break;
     }
+    case TRS_TIME:
+    {
+        btsomLogger(LOG_INFO, "Moc time IMchangeNotification from TRSW");
+        void *moc = static_cast<void *>(&trsMsg->data.ntpTimeMocInfo);
+        if (sendChangeNotify(moc, "NtpTime", OBJ_TIME) == BTSOM_SUCCESS)
+        {
+            return BTSOM_SUCCESS;
+        }       
+        btsomLogger(LOG_ERR, "Failed to send the TIME Moc updates to SyncApp");
+        break;
+    }
     default:
         btsomLogger(LOG_ERR, "MocType is not handled: %d", (int)trsMsg->mocEnum);
         return BTSOM_FAIL;
Index: C_Application/SC_OAM/PIA/OM_BMA/ProtoBuff/Info_Model/Source/sync_all.cpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_BMA/ProtoBuff/Info_Model/Source/sync_all.cpp	(revision 78711)
+++ C_Application/SC_OAM/PIA/OM_BMA/ProtoBuff/Info_Model/Source/sync_all.cpp	(working copy)
@@ -101,7 +101,7 @@
         btsomLogger(LOG_ERR, "Failed to create GPS object");
         return BTSOM_FAIL;
     }
-    SyncBaseContainer[OBJ_TIME] =  new (std::nothrow) synca_time_object(m_itsfsm, std::make_unique<ImChangeRequestFactoryImpl>(), std::make_unique<CcsSender>(ccs::Cpid{BTSOM_SYNCA_CPID}));
+    SyncBaseContainer[OBJ_TIME] =  new (std::nothrow) synca_time_object(m_itsfsm, std::make_unique<ImChangeRequestFactoryImpl>(), std::make_unique<CcsSender>(ccs::Cpid{BTSOM_SYNCA_CPID}), PilService);
     if(!SyncBaseContainer[OBJ_TIME])
     {
         btsomLogger(LOG_ERR,"Failed to create TIME object");
Index: C_Application/SC_OAM/PIA/OM_BMA/ProtoBuff/Info_Model/Source/sync_time.cpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_BMA/ProtoBuff/Info_Model/Source/sync_time.cpp	(revision 78711)
+++ C_Application/SC_OAM/PIA/OM_BMA/ProtoBuff/Info_Model/Source/sync_time.cpp	(working copy)
@@ -14,14 +14,17 @@
 #include "ImChangeRequestFactory.h"
 #include "utils/Sender.h"
 #include "operators/BmaParametersUpdateIndOperators.h"
+#include "utils/Memory.h"
 
 synca_time_object::synca_time_object(
     SyncAFsm* fsmInit,
     std::unique_ptr<ImChangeRequestFactory> imChangeRequestFactoryInit,
-    std::unique_ptr<Sender> messageSenderInit)
+    std::unique_ptr<Sender> messageSenderInit,
+    I_TRSWA_Service *trswAPilService)
     : fsm{fsmInit},
       imChangeRequestFactory{std::move(imChangeRequestFactoryInit)},
-      messageSender{std::move(messageSenderInit)}
+      messageSender{std::move(messageSenderInit)},
+      trswAPilService(trswAPilService)
 {
 }
 
@@ -158,6 +161,8 @@
         }
         update_local_slave_object(msg_sync_time_object);
     }
+
+    handleUpdateNtpTimeServerStatus(msg_sync_time_object);
 }
 
 bool synca_time_object::checkTimezoneDataForUpdates(const SYNC_IM_VERSION::time_t& msg_sync_time_object)
@@ -201,10 +206,15 @@
 }
 
 BtsOmStatus synca_time_object::send_change_request(void* syncImChange,
-                                                   std::string,
+                                                   std::string timeflag,
                                                    TAaSysComSicad receiver,
                                                    TAaSysComSicad sender)
 {
+    if(timeflag == "NtpTime")
+    {
+        return send_change_request(syncImChange, receiver, sender);
+    }
+
     if (!local_sync_time_object.IsInitialized() || syncImChange == nullptr)
     {
         OAMLOG_ERR << "Local object is not initialized properly  or input is nullptr. " <<
@@ -378,6 +388,7 @@
 
 void synca_time_object::handle_operation_executed_msg(operation_executed_msg operation_msg)
 {
+    isNtpTimeConfigurationInProgress = false;
     imi::v2::IMOperationExecuted_EExecutionStatus status = operation_msg->execution_status();
     const auto request_id = operation_msg->request_id();
     OAMLOG_INF << "with request_id: " << request_id << ", status: " << status;
@@ -647,3 +658,122 @@
         messageSender->send(std::move(*indication_opt), ccs::Cpid{TASK_OAM_SOAP_RECEIVER1});
     }
 }
+
+void synca_time_object::handleUpdateNtpTimeServerStatus(const SYNC_IM_VERSION::time_t& updatedTimeObject)
+{
+    if(updatedTimeObject.has_oper_setntptimeparams())
+    {
+        isNtpTimeConfigurationInProgress = false;
+        NtpTimeParams timeparams = convertToNtpTimeParam(updatedTimeObject);
+
+        SyncIMChangeNotify trsReqParams = {};
+        trsReqParams.mocEnum = TRS_TIME;
+        trsReqParams.data.ntpTimeMocInfo = timeparams;
+
+        if (nullptr == trswAPilService)
+        {
+            btsomLogger(LOG_ERR, "TRSW Pil instance is not available. Failed to send updates to TRS");
+            return;
+        }
+        btsomLogger(LOG_INFO, "Sending NTP Time (Sync->TRS) params");
+        trswAPilService->SendSyncChangeReqToTRSWA(trsReqParams);
+    }
+}
+
+NtpTimeParams synca_time_object::convertToNtpTimeParam(const SYNC_IM_VERSION::time_t& updatedTimeObject)
+{
+    NtpTimeParamsWrapper timewrapper{};
+
+    const int size = updatedTimeObject.ntptimeserverstatuslist_size();
+    for (int i = 0; i < size; i++)
+    {
+        NtpTimeServerStatusList ntpTimeServerStatusList = {};
+        auto statusList = updatedTimeObject.ntptimeserverstatuslist(i);
+        ::utils::copyString(ntpTimeServerStatusList.ipAdrr, statusList.ntptimeserveripaddr());
+        ntpTimeServerStatusList.status = static_cast<NtpTimeServerStatus>(statusList.ntptimeserverstatus());
+        timewrapper.setServerStatusList(i, ntpTimeServerStatusList);
+    }
+    timewrapper.dumpToLog();
+    return timewrapper.getNtpTimeParams();
+}
+
+SYNC_IM_VERSION::time_t synca_time_object::getNtpTimeInfoModelFromTimeParams(const NtpTimeParamsWrapper& ntpTimeParams)
+{
+    SYNC_IM_VERSION::time_t infoModel;
+
+    if (ntpTimeParams.hasLocalIp())
+    {
+        infoModel.set_ntptimelocalip(ntpTimeParams.getLocalIp());
+    }
+
+    for (int i = 0; ntpTimeParams.hasServerConfig(i); i++)
+    {
+        auto serverConfig = infoModel.add_ntptimeserversconfig();
+        serverConfig->set_ntptimeserver(ntpTimeParams.getServersConfig(i).ipAddr);
+    }
+
+    return infoModel;
+}
+
+BtsOmStatus synca_time_object::send_change_request(void *syncImChange, TAaSysComSicad receiver, TAaSysComSicad sender)
+{
+    if (syncImChange == nullptr)
+    {
+        btsomLogger(LOG_ERR, "NTP Time: Empty syncImChange");
+        return BTSOM_FAIL;
+    }
+
+    NtpTimeParamsWrapper ntpTimeParamsWrapper{ *static_cast<NtpTimeParams *>(syncImChange) };
+    ntpTimeParamsWrapper.dumpToLog();
+
+    if (!ntpTimeParamsWrapper.hasLocalIp())
+    {
+        if (ntpTimeInfoModel.isLocalIpNonzero())
+        {
+            logDebug("NTP: There is no localIp in imChangeNotif. Current localIp is NOT zero, so doing "
+                     "nothing with it.");
+        }
+        else
+        {
+            logInfo("NTP: There is no localIp in imChangeNotif. Current localIp is zero or empty, so setting "
+                    "it to 0.0.0.0.");
+            ntpTimeParamsWrapper.setLocalIp("0.0.0.0");
+        }
+    }
+
+    ntpTimeInfoModel = ntpTimeParamsWrapper;
+
+    SYNC_IM_VERSION::time_t currentTimeInfoModel = getNtpTimeInfoModelFromTimeParams(ntpTimeParamsWrapper);
+
+
+    std::string payload = currentTimeInfoModel.SerializeAsString();
+
+    if (payload == "")
+    {
+        btsomLogger(LOG_ERR, "NTP Time Info model serialization failed");
+        return BTSOM_FAIL;
+    }
+
+    unsigned int requestId = fsm->getNewRequestId();
+    btsomLogger(LOG_INFO, "Sending BM_IM_CHANGE_REQUEST_MSG For NTP Time params. request_id = %d", requestId);
+
+    change_request_msg changeReqMsg(BM_IM_CHANGE_REQUEST_MSG, sender, receiver);
+    changeReqMsg->set_request_id(requestId);
+    imi::v2::IMChangeRequest::object_operation *oper = changeReqMsg->add_operations();
+    oper->set_operation_type(imi::v2::IMChangeRequest::object_operation::EOperationType_execute);
+    oper->mutable_object()->set_distname(constant::sync_ntp_distname);
+    oper->mutable_object()->set_payload(payload);
+    changeReqMsg.send();
+    fsm->storeRequestId(requestId, OBJ_TIME);
+    clearObjOperations(changeReqMsg);
+    changeReqMsg->clear_operations();
+
+    isNtpTimeConfigurationInProgress = true;
+
+    return BTSOM_SUCCESS;
+}
+
+bool synca_time_object::isNtpTimeInProgress()
+{
+    return isNtpTimeConfigurationInProgress;
+}
Index: C_Application/SC_OAM/PIA/OM_BMA/ProtoBuff/Info_Model/Include/sync_time.h
===================================================================
--- C_Application/SC_OAM/PIA/OM_BMA/ProtoBuff/Info_Model/Include/sync_time.h	(revision 78711)
+++ C_Application/SC_OAM/PIA/OM_BMA/ProtoBuff/Info_Model/Include/sync_time.h	(working copy)
@@ -6,6 +6,8 @@
 #include "SyncAFsm.h"
 #include "utils/Utils.h"
 #include "TimeBmaParametersUpdateIndBuilder.h"
+#include "NtpTimeParamsWrapper.h"
+#include "I_TRSWA_Service.h"
 
 #define check_diff_time(temp_object, attr) \
     ((local_sync_time_object.attr != temp_object.attr) ? "Param updated" : "Param same")
@@ -25,10 +27,11 @@
     static void update_local_object(SYNC_IM_VERSION::time_t&);
     static void update_local_slave_object(SYNC_IM_VERSION::time_t&);
 
-    synca_time_object(SyncAFsm*, std::unique_ptr<ImChangeRequestFactory>, std::unique_ptr<Sender>);
+    synca_time_object(SyncAFsm*, std::unique_ptr<ImChangeRequestFactory>, std::unique_ptr<Sender>, I_TRSWA_Service *trswAPilService);
 
     void send_timeSource_update_notif_to_client(SYNC_IM_VERSION::time_t&, bool clientNotify, TAaSysComCpid);
     void send_utcGpsOffset_update_notif_to_client(SYNC_IM_VERSION::time_t&, bool clientNotify, TAaSysComCpid);
+    bool isNtpTimeInProgress();     
 
 private:
     using RequestIds = std::set<u32>;
@@ -54,12 +57,19 @@
     bool isMaxBtsTimeErrorChanged(const boost::optional<u32>& maxBtsTimeError_opt) const;
     void sendMaxBtsTimeErrorChangeReq(u32 maxBtsTimeError, ccs::sicad::To, ccs::sicad::From);
     void handlePossibleCountersChange(const SYNC_IM_VERSION::time_t&);
+    void handleUpdateNtpTimeServerStatus(const SYNC_IM_VERSION::time_t& updatedTimeObject);
+    NtpTimeParams convertToNtpTimeParam(const SYNC_IM_VERSION::time_t& updatedTimeObject);
+    SYNC_IM_VERSION::time_t getNtpTimeInfoModelFromTimeParams(const NtpTimeParamsWrapper& ntpTimeParams);
+    BtsOmStatus send_change_request(void *syncImChange, TAaSysComSicad receiver, TAaSysComSicad sender);
 
     SyncAFsm* fsm;
     std::unique_ptr<ImChangeRequestFactory> imChangeRequestFactory;
     std::unique_ptr<Sender> messageSender;
     RequestIds requestIdsForTimeZoneName;
     TimeBmaParametersUpdateIndBuilder timeBmaParametersUpdateIndBuilder;
+    I_TRSWA_Service *trswAPilService;
+    NtpTimeParamsWrapper ntpTimeInfoModel{};
+    bool isNtpTimeConfigurationInProgress;
 };
 
 extern SYNC_IM_VERSION::time_t local_sync_time_object;
Index: C_Application/SC_OAM/PIA/OM_RP1A/Source/NtpTimeTrswaSoapMessageBuilder.cpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/Source/NtpTimeTrswaSoapMessageBuilder.cpp	(revision 0)
+++ C_Application/SC_OAM/PIA/OM_RP1A/Source/NtpTimeTrswaSoapMessageBuilder.cpp	(revision 0)
@@ -0,0 +1,76 @@
+#include "NtpTimeTrswaSoapMessageBuilder.h"
+
+#include <iostream>
+#include <sstream>
+
+#include "boost/property_tree/xml_parser.hpp"
+
+#include "ObsaiUtils.h"
+
+std::unique_ptr<ModifyParamReq> NtpTimeTrswaSoapMessageBuilder::buildModifyMessage(const NtpTimeParamsWrapper &ntpTimeParams)
+{
+    std::unique_ptr<ModifyParamReq> paramReq(new ModifyParamReq);
+    paramReq->SetManagedObject(modifyParamManagedObject);
+    std::string newValue;
+    for (int i = 0; ntpTimeParams.hasServerStatusList(i); i++)
+    {
+        newValue += getNtpTimeStatusListXmlString(ntpTimeParams.getServerStatusList(i));
+    }
+    paramReq->InsertParam(SoapParameter{"ntpServerStatusListExternal", newValue, ""});
+
+    return paramReq;
+}
+
+std::string NtpTimeTrswaSoapMessageBuilder::getNtpTimeStatusListXmlString(const NtpTimeServerStatusList &statusList)
+{
+    boost::property_tree::ptree node;
+    node.add("ntpServerIpAddress", statusList.ipAdrr);
+    node.add("ntpStatus", toString(statusList.status));
+    boost::property_tree::ptree root;
+    root.add_child("ntpServerStatus", node);
+    return parsePtreeToString(root);
+}
+
+std::string NtpTimeTrswaSoapMessageBuilder::parsePtreeToString(boost::property_tree::ptree node)
+{
+    std::stringstream ss;
+    write_xml_element(ss, std::string(), node, -1,
+                      boost::property_tree::xml_parser::xml_writer_make_settings<std::string>(' ', 0));
+    return ss.str();
+}
+
+std::unique_ptr<RetrieveParamReq> NtpTimeTrswaSoapMessageBuilder::buildRetrieveMessage(const std::string &parameterName)
+{
+    std::unique_ptr<RetrieveParamReq> paramReq(new RetrieveParamReq(retrieveParamManagedObject));
+    paramReq->InsertParam(SoapParameter{parameterName, "", ""});
+    paramReq->SetHeaderData(GenerateBtsomMsgId(), "FTM", "BTS_OM", "OBSAI_CM", "2.0");
+    return paramReq;
+}
+
+std::unique_ptr<RetrieveParamReq> NtpTimeTrswaSoapMessageBuilder::buildNtpTimeServersRequest()
+{
+    return buildRetrieveMessage("ntpServerStatusListExternal");
+}
+
+std::unique_ptr<RetrieveParamReq> NtpTimeTrswaSoapMessageBuilder::buildNtpTimeLocalIpRequest()
+{
+    return buildRetrieveMessage("ntpSourceIpAddress");
+}
+
+const std::string NtpTimeTrswaSoapMessageBuilder::toString(NtpTimeServerStatus status) const
+{
+    switch (status)
+    {
+    case NtpTimeServerStatus::EntpTimeServerStatus_Unknown:
+        return "Unknown";
+    case NtpTimeServerStatus::EntpTimeServerStatus_Unavailable:
+        return "Unavailable";
+    case NtpTimeServerStatus::EntpTimeServerStatus_Available:
+        return "Available";
+    case NtpTimeServerStatus::EntpTimeServerStatus_InSync:
+        return "InSync";
+    default:
+        btsomLogger(LOG_ERR, "NTP Time: Incorrect server status");
+        return "";
+    }
+}
Index: C_Application/SC_OAM/PIA/OM_RP1A/Source/CTrswAStateReady.cpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/Source/CTrswAStateReady.cpp	(revision 78711)
+++ C_Application/SC_OAM/PIA/OM_RP1A/Source/CTrswAStateReady.cpp	(working copy)
@@ -20,6 +20,7 @@
 #include "TrswMessagesStore.h"
 #include "SOAPStrings.h"
 #include "NtpTrswaSoapMessageBuilder.h"
+#include "NtpTimeTrswaSoapMessageBuilder.h"
 #include "utils/Memory.h"
 #include "MessageId_Lte_BTSOM_BtsomZone.h"
 #include "CTrswAParamGetter.h"
@@ -39,6 +40,7 @@
 #include "I_NotifyData.h"
 #include "IntpChangeHandler.h"
 #include "BmaParametersUpdateIndHandler.h"
+#include "TRSWAPilService.h"
 
 #define SYSLOG_IPADDRESS "remoteSyslogServerIPaddress"
 #define SYSLOG_IPPORT "remoteSyslogServerPortNo"
@@ -559,8 +561,17 @@
         }
         else if (objectName.find("INTP-1") != std::string::npos)
         {
-            OAMLOG_DBG << "Passing to handler: " << xmlParser.getParValueChangeIndParameterMap();
-            intpChangeHandler->handleParValueChangeInd(xmlParser.getParValueChangeIndParameterMap());
+            std::string paramName = xmlParser.getParamName();
+            if ( (objectName.find("DN:INTP-1") != std::string::npos) && ( (paramName == "ntpServerListExternal") ||
+               (paramName == "ntpServerIpAddress") || (paramName == "ntpSourceIpAddress") ) )
+            {
+                sendSyncIMChangeNotify(xmlParser);
+            }
+            else
+            {
+                OAMLOG_DBG << "Passing to handler: " << xmlParser.getParValueChangeIndParameterMap();
+                intpChangeHandler->handleParValueChangeInd(xmlParser.getParValueChangeIndParameterMap());
+            }
         }
         else if (objectName == RuimHandler::ruimDn)
         {
@@ -617,8 +628,17 @@
         }
         else if (xmlParser.getObjDistName().find("INTP-1") != std::string::npos)
         {
-            OAMLOG_DBG << "Passing to handler: " << xmlParser.getParValueChangeIndParameterMap();
-            intpChangeHandler->handleRetrieveParameterResp(xmlParser.getParValueChangeIndParameterMap());
+            std::string paramName = xmlParser.getParamName();
+            if ( (xmlParser.getObjDistName().find("DN:INTP-1") != std::string::npos) && ( (paramName == "ntpServerListExternal") ||
+               (paramName == "ntpServerIpAddress") || (paramName == "ntpSourceIpAddress") ) )
+            {
+                sendSyncIMChangeNotify(xmlParser);
+            }
+            else
+            {
+                OAMLOG_DBG << "Passing to handler: " << xmlParser.getParValueChangeIndParameterMap();
+                intpChangeHandler->handleRetrieveParameterResp(xmlParser.getParValueChangeIndParameterMap());
+            }
         }
         else
         {
@@ -1354,6 +1374,15 @@
         NtpTrswaSoapMessageBuilder builder;
         newModifyParamReq = builder.buildModifyMessage(ntpParams);
     }
+    else if (notifMsg->mocEnum == TRS_TIME)
+    {
+        btsomLogger(LOG_INFO, "Sending modifyParamReq to TRS for NTP-TIME moc");
+        NtpTimeParamsWrapper ntpTimeParams{notifMsg->data.ntpTimeMocInfo};
+        ntpTimeParams.dumpToLog();
+
+        NtpTimeTrswaSoapMessageBuilder builder;
+        newModifyParamReq = builder.buildModifyMessage(ntpTimeParams);
+    }
     else
     {
         btsomLogger(LOG_ERR,"Unknown SYNC MOC in SendSyncSpecificModifyParamRequest");
@@ -1372,6 +1401,7 @@
     getDaisyChainPort();
     GetSTPGParamsFromTRS();
     getNtpsParamsFromTrs();
+    getNtpsTimeParamsFromTrs();
     retrieveIntpParameters();
 
     systemWrapper.sleep(5s);
@@ -1519,6 +1549,16 @@
     soapSender->sendMessage(soapMessage, ccs::Cpid{CPID_TRSW_RP1}, APP_SOAP_DL_MSG);
 }
 
+void CTrswAStateReady::getNtpsTimeParamsFromTrs(void)
+{
+    NtpTimeTrswaSoapMessageBuilder builder;
+
+    btsomLogger(LOG_INFO, "Sending RetrieveParamReq for NtpTimeServers data (NTP Time).");
+    sendRetrieveParameterRequest(builder.buildNtpTimeServersRequest());
+    btsomLogger(LOG_INFO, "Sending RetrieveParamReq for NtpTimeLocalIp data (NTP Time).");
+    sendRetrieveParameterRequest(builder.buildNtpTimeLocalIpRequest());
+}
+
 void CTrswAStateReady::getNtpsParamsFromTrs(void)
 {
     NtpTrswaSoapMessageBuilder builder;
@@ -1918,3 +1958,17 @@
     OAMLOG_DBG << "Sending RetrieveParamReq for DN:INTP-1:" << maxNtpTimeError.paramName;
     sendRetrieveParameterRequest(std::move(request));
 }
+
+void CTrswAStateReady::sendSyncIMChangeNotify(const ObsaiXmlParser &xmlParser)
+{
+    OAMLOG_DBG << "Get  TrswNtpTime params from XML";
+    SyncIMChangeNotify syncChangeNotif = {};
+    syncChangeNotif.mocEnum = TRS_TIME;
+    syncChangeNotif.data.ntpTimeMocInfo = xmlParser.getTrswNtpTimeConfig().getTimeParams();
+
+    NtpTimeParamsWrapper timeParamsWrapper{xmlParser.getTrswNtpTimeConfig().getTimeParams()};
+    timeParamsWrapper.dumpToLog();
+                
+    std::unique_ptr<I_TRSWA_Service>trsPilService = std::make_unique<TRSWAPilService>(BTSOM_OBSAI_CPID);
+    trsPilService->SendIMChangeNotifToSyncAgent(syncChangeNotif);
+}
Index: C_Application/SC_OAM/PIA/OM_RP1A/Source/ObsaiXmlParser.cpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/Source/ObsaiXmlParser.cpp	(revision 78711)
+++ C_Application/SC_OAM/PIA/OM_RP1A/Source/ObsaiXmlParser.cpp	(working copy)
@@ -81,7 +81,8 @@
     else if ((name == "parameterName") || (name == "newValue") || (name == "prevValue") ||
              (name == "parameter") || ("topConfig" == parameterName) ||
              ("ntpSyncServerListExternal" == parameterName) || ("ntpSyncPollingRate" == parameterName) ||
-             ("ntpSyncLocalIp") == parameterName || (name == "name") || (name == "type") ||
+             ("ntpSyncLocalIp" == parameterName) || ("ntpServerStatusListExternal" == parameterName) ||
+             ("ntpSourceIpAddress" == parameterName) || (name == "name") || (name == "type") ||
              (name == "value") || (name == "argument"))
     {
         // Should not do any thing here
@@ -162,6 +163,10 @@
         {
             trswNtpConfig.handleParameter(parameterName, curValue_);
         }
+        else if ("ntpSourceIpAddress" == parameterName)
+        {
+            trswNtpTimeConfig.handleParameter(parameterName, curValue_);
+        }
         else if (isPattern)
         {
             parValueChangeIndParameter.newValue = ledPattern;
@@ -256,6 +261,10 @@
     {
         trswNtpConfig.handleParameter(name, curValue_);
     }
+    else if ("ntpServerStatusListExternal" == parameterName)
+    {
+        trswNtpTimeConfig.handleParameter(name, curValue_);
+    }
     else if ("addTransportNwIpAddrList" == parameterName)
     {
         trswAddTransportNwIpAddrList_.handleParameter(name, curValue_);
@@ -447,6 +456,11 @@
     return trswAddTransportNwIpAddrList_;
 }
 
+const TrswNtpTimeConfig &ObsaiXmlParser::getTrswNtpTimeConfig() const
+{
+    return trswNtpTimeConfig;
+}
+
 const soap::RfswSupportedFeaturesDistnamesListParser&
 ObsaiXmlParser::getRfswSupportedFeaturesListParser() const
 {
Index: C_Application/SC_OAM/PIA/OM_RP1A/Source/TrswNtpTimeConfig.cpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/Source/TrswNtpTimeConfig.cpp	(revision 0)
+++ C_Application/SC_OAM/PIA/OM_RP1A/Source/TrswNtpTimeConfig.cpp	(revision 0)
@@ -0,0 +1,61 @@
+#include "TrswNtpTimeConfig.h"
+#include "NtpTimeParamsWrapper.h"
+#include <string>
+#include "BtsOmLogger.h"
+
+void TrswNtpTimeConfig::setNtpTimeLocalIp(std::string value)
+{
+    std::copy(value.begin(), value.end(), timeParams.localIp);
+}
+
+void TrswNtpTimeConfig::addNtpTimeServer(std::string value)
+{
+    if(serverListCount >= maxNtpTimeServersNumber)
+    {
+        btsomLogger(LOG_ERR, "Currently server count >= 3");
+        return;
+    }
+    NtpTimeServersConfig newTimeServer{};
+    std::copy(value.begin(), value.end(), newTimeServer.ipAddr);
+    timeParams.serversConfig[serverListCount++] = newTimeServer;
+    timeParams.serverCount = serverListCount;
+}
+
+int TrswNtpTimeConfig::getServerListCount()
+{
+    return serverListCount;
+}
+
+NtpTimeParams TrswNtpTimeConfig::getTimeParams() const
+{
+    return timeParams;
+}
+
+void TrswNtpTimeConfig::handleParameter(std::string name, std::string value)
+{
+
+    if (name == "ntpServerIpAddress")
+    {
+        if(!value.empty())
+        {
+            addNtpTimeServer(value);
+        }
+    }
+    else if (name == "ntpSourceIpAddress")
+    {
+        if(!value.empty())
+        {
+            setNtpTimeLocalIp(value);
+            timeParams.paramFlag = true;
+        }
+    }
+    else
+    {
+        btsomLogger(LOG_ERR, "Unsupported param: %s encountered while executing NTP Time param conversion", name.c_str());
+    }
+}
+
+bool TrswNtpTimeConfig::hasLocalIp()
+{
+    return timeParams.paramFlag;
+}
Index: C_Application/SC_OAM/PIA/OM_RP1A/Include/TrswNtpTimeConfig.h
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/Include/TrswNtpTimeConfig.h	(revision 0)
+++ C_Application/SC_OAM/PIA/OM_RP1A/Include/TrswNtpTimeConfig.h	(revision 0)
@@ -0,0 +1,20 @@
+#pragma once
+
+#include<string>
+#include<NtpTimeParams.h>
+
+
+class TrswNtpTimeConfig
+{
+public:
+    void handleParameter(std::string name, std::string value);
+    void addNtpTimeServer(std::string value);
+    void setNtpTimeLocalIp(std::string value);
+    int  getServerListCount();
+    NtpTimeParams getTimeParams() const;
+    bool hasLocalIp();
+
+private:
+    unsigned int serverListCount = 0;
+    NtpTimeParams timeParams{};
+};
Index: C_Application/SC_OAM/PIA/OM_RP1A/Include/CTrswAStateReady.hpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/Include/CTrswAStateReady.hpp	(revision 78711)
+++ C_Application/SC_OAM/PIA/OM_RP1A/Include/CTrswAStateReady.hpp	(working copy)
@@ -47,6 +47,7 @@
     void GetIPNOParamsFromTRS(void);
     void GetSYNCParamsFromTRS(void);
     void getNtpsParamsFromTrs(void);
+    void getNtpsTimeParamsFromTrs(void);
     void getDaisyChainPort(void);
     void SendTrswServingOMS(std::string serving_type);
     void SendTrswRetriveServingOmsIpAddr();
@@ -64,6 +65,7 @@
     void InsertParamToRetrieveReq(RetrieveParamReq *newRetrieveParamReq, std::string paramName);
     bool handleFZCClearAndAutoConncectionRestart(const AutoConnParInfo* autoConnInfo, const std::string& msgid);
     void handleNe3sAuthenticationReq(const CComPortEventT<NE3SA_AuthenticationReq>& msg);
+    void sendSyncIMChangeNotify(const ObsaiXmlParser &xmlParser);
 
 private:
     TBoolean HandleSOAPMessage(CEvent* p_event);
Index: C_Application/SC_OAM/PIA/OM_RP1A/Include/ObsaiXmlParser.h
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/Include/ObsaiXmlParser.h	(revision 78711)
+++ C_Application/SC_OAM/PIA/OM_RP1A/Include/ObsaiXmlParser.h	(working copy)
@@ -14,6 +14,7 @@
 #include "ParValueChangeMap.h"
 #include "TrswTopConfig.h"
 #include "TrswNtpConfig.h"
+#include "TrswNtpTimeConfig.h"
 
 static size_t const MAX_READ_BUFFER = 256;
 
@@ -74,6 +75,7 @@
     const ManagedObjectDataMap &getManagedObjectDataMap() const;
     const TrswTopConfig &getTrswTopConfig() const;
     const TrswNtpConfig &getTrswNtpConfig() const;
+    const TrswNtpTimeConfig &getTrswNtpTimeConfig() const;
     const TrswAddTransportNwIpAddrList &getTrswAddTransportNwIpAddrList() const override;
     const soap::RfswSupportedFeaturesDistnamesListParser& getRfswSupportedFeaturesListParser() const override;
     const soap::RfswSupportedFeatureMOsHandler& getRfswSupportedFeatureMOsHandler() const override;
@@ -126,6 +128,7 @@
 
     TrswTopConfig trswTopConfig_;
     TrswNtpConfig trswNtpConfig;
+    TrswNtpTimeConfig trswNtpTimeConfig;
     TrswAddTransportNwIpAddrList trswAddTransportNwIpAddrList_;
     soap::RfswSupportedFeaturesDistnamesListParser rfswSupportedFeaturesDistnamesListParser;
     soap::RfswSupportedFeatureMOsHandler rfswSupportedFeatureMOsHandler;
Index: C_Application/SC_OAM/PIA/OM_RP1A/Include/NtpTimeTrswaSoapMessageBuilder.h
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/Include/NtpTimeTrswaSoapMessageBuilder.h	(revision 0)
+++ C_Application/SC_OAM/PIA/OM_RP1A/Include/NtpTimeTrswaSoapMessageBuilder.h	(revision 0)
@@ -0,0 +1,31 @@
+#pragma once
+
+#include <vector>
+#include <memory>
+
+#include "boost/property_tree/ptree.hpp"
+
+#include "RetrieveParamReq.h"
+#include "ModifyParamReq.h"
+
+#include "NtpTimeParamsWrapper.h"
+
+
+class NtpTimeTrswaSoapMessageBuilder
+{
+public:
+    std::unique_ptr<ModifyParamReq> buildModifyMessage(const NtpTimeParamsWrapper &ntpTimeParams);
+    std::unique_ptr<RetrieveParamReq> buildRetrieveMessage(const std::string &parameterName);
+    std::unique_ptr<RetrieveParamReq> buildNtpTimeServersRequest();
+    std::unique_ptr<RetrieveParamReq> buildNtpTimeLocalIpRequest();
+
+private:
+    std::string getNtpTimeStatusListXmlString(const NtpTimeServerStatusList &statusList);
+
+    std::string parsePtreeToString(boost::property_tree::ptree node);
+
+    const std::string modifyParamManagedObject = "DN:INTP-1";
+    const std::string retrieveParamManagedObject = "DN:INTP-1";
+    const std::string toString(NtpTimeServerStatus status) const;
+};
+
Index: C_Application/SC_OAM/PIA/OM_RP1A/UT/Source/NtpTimeTrswaSoapMessageBuilderTest.cpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/UT/Source/NtpTimeTrswaSoapMessageBuilderTest.cpp	(revision 0)
+++ C_Application/SC_OAM/PIA/OM_RP1A/UT/Source/NtpTimeTrswaSoapMessageBuilderTest.cpp	(revision 0)
@@ -0,0 +1,51 @@
+#include "TestIncludes.h"
+
+#include <iostream>
+#include <sstream>
+
+#include "NtpTimeTrswaSoapMessageBuilder.h"
+
+class NtpTimeTrswaSoapMessageBuilderTest : public ::testing::Test
+{
+public:
+    void SetUp() override
+    {
+        ModifyParamReq modifyParamReq;
+        modifyParamReq.SetManagedObject("DN:INTP-1");
+        std::string newValue = generateNewValueContent("192.168.0.4", "Unknown");
+        newValue += generateNewValueContent("192.168.0.5", "Unavailable");
+        newValue += generateNewValueContent("192.168.0.6", "Available");
+        modifyParamReq.InsertParam(SoapParameter{"ntpServerStatusListExternal", newValue, ""});
+        std::ostringstream ss;
+        modifyParamReq.BuildMsgBody(ss);
+        expectedModifyParamRequest = ss.str();
+    }
+
+protected:
+    NtpTimeParamsWrapper paramsWrapper;
+    NtpTimeTrswaSoapMessageBuilder builder;
+    std::string expectedModifyParamRequest;
+    void buildNtpTimeParamsWrapper()
+    {
+        paramsWrapper.setServerStatusList(0, NtpTimeServerStatusList{"192.168.0.4", NtpTimeServerStatus::EntpTimeServerStatus_Unknown});
+        paramsWrapper.setServerStatusList(1, NtpTimeServerStatusList{"192.168.0.5", NtpTimeServerStatus::EntpTimeServerStatus_Unavailable});
+        paramsWrapper.setServerStatusList(2, NtpTimeServerStatusList{"192.168.0.6", NtpTimeServerStatus::EntpTimeServerStatus_Available});
+    }
+
+private:
+    std::string generateNewValueContent(std::string ip, std::string status)
+    {
+        return "<ntpServerStatus><ntpServerIpAddress>" + ip + "</ntpServerIpAddress><ntpStatus>" + status +
+               "</ntpStatus></ntpServerStatus>";
+    }
+};
+
+
+TEST_F(NtpTimeTrswaSoapMessageBuilderTest, buildNTpTimeModifyMessage)
+{
+    buildNtpTimeParamsWrapper();
+    std::unique_ptr<ModifyParamReq> paramReq(builder.buildModifyMessage(paramsWrapper));
+    std::ostringstream result;
+    paramReq->BuildMsgBody(result);
+    ASSERT_EQ(expectedModifyParamRequest, result.str());
+}
Index: C_Application/SC_OAM/PIA/OM_RP1A/UT/Source/TrswNtpTimeConfigTest.cpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/UT/Source/TrswNtpTimeConfigTest.cpp	(revision 0)
+++ C_Application/SC_OAM/PIA/OM_RP1A/UT/Source/TrswNtpTimeConfigTest.cpp	(revision 0)
@@ -0,0 +1,22 @@
+#include "gtest/gtest.h"
+
+#include <array>
+
+#include "TrswNtpTimeConfig.h"
+
+class TrswNtpTimeConfigTest : public ::testing::Test
+{
+protected:
+    TrswNtpTimeConfig trswNtpTimeConfig{};
+
+    const std::string timeServers = "ntpServerIpAddress";
+    const std::string localIp = "ntpSourceIpAddress";
+};
+
+TEST_F(TrswNtpTimeConfigTest, handleParamater_setNtpTimeLocalIp)
+{
+    trswNtpTimeConfig.handleParameter(localIp, "192.168.0.1");
+    std::string temp = trswNtpTimeConfig.getTimeParams().localIp;
+    EXPECT_STREQ("192.168.0.1", temp.c_str());    
+    EXPECT_TRUE(trswNtpTimeConfig.hasLocalIp());
+}
Index: C_Application/SC_OAM/PIA/OM_RP1A/UT/Source/CTrswAStateReadyTest.cpp
===================================================================
--- C_Application/SC_OAM/PIA/OM_RP1A/UT/Source/CTrswAStateReadyTest.cpp	(revision 78711)
+++ C_Application/SC_OAM/PIA/OM_RP1A/UT/Source/CTrswAStateReadyTest.cpp	(working copy)
@@ -351,9 +351,28 @@
                     sendMessage(IsSoapBodyCorrect(expectedBody), trswCpid, APP_SOAP_DL_MSG));
     }
 
+    void expectNtpTimeServerListExternalRetrieval()
+    {
+        Parameters parameters;
+        parameters.push_back(createSoapParameter(Name{"ntpServerStatusListExternal"}, NewValue{}));
+        const auto expectedBody = prepareSoapBody("retrieveParameterReq", ntpTimeDn, parameters);
+
+        expectSendingRetrieveParameterRequest(expectedBody);
+    }
+
+    void expectNtpTimneLocalIpRetrieval()
+    {
+        Parameters parameters;
+        parameters.push_back(createSoapParameter(Name{"ntpSourceIpAddress"}, NewValue{}));
+        const auto expectedBody = prepareSoapBody("retrieveParameterReq", ntpTimeDn, parameters);
+
+        expectSendingRetrieveParameterRequest(expectedBody);
+    }
+
     const std::string syncDn{"SYNC-1"};
     const std::string ntpsDn{"NTPS-1"};
     const std::string ipscDn{"IPSC-1"};
+    const std::string ntpTimeDn{"DN:INTP-1"};
     const ccs::Cpid trswCpid{CPID_TRSW_RP1};
 };
 
@@ -380,6 +399,8 @@
     expectNtpSyncServerListExternalRetrieval();
     expectNtpSyncPollingRateRetrieval();
     expectNtpSyncLocalIpRetrieval();
+    expectNtpTimeServerListExternalRetrieval();
+    expectNtpTimneLocalIpRetrieval();
     expectMaxNtpTimeErrorRetrieval();
     EXPECT_CALL(systemWrapper, sleep(5s));
 
